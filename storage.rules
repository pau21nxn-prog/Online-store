rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true
service firebase.storage {
  match /b/{bucket}/o {
    // Product images - admins can upload, everyone can read
    match /products/{productId}/{imageId} {
      // Allow read access to all users for product images
      allow read: if true;
      
      // Allow write access only to authenticated admin users
      allow write: if request.auth != null && 
        exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Admin uploads folder - more general admin uploads
    match /admin/{allPaths=**} {
      allow read, write: if request.auth != null && 
        exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Temporary uploads for processing
    match /temp/{allPaths=**} {
      allow read, write: if request.auth != null;
      
      // Auto-delete temp files after 1 day
      allow delete: if true;
    }
    
    // User profile images (if needed later)
    match /users/{userId}/profile/{imageId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Validation rules for uploads
    function isValidImage() {
      return request.resource.size < 10 * 1024 * 1024 && // 10MB limit
             request.resource.contentType.matches('image/.*');
    }
    
    // Apply validation to all uploads
    match /{allPaths=**} {
      allow write: if isValidImage();
    }
  }
}